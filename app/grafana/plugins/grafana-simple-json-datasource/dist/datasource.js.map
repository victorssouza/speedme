{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var query = this.buildQueryParameters(options);\n\n    if (query.targets.length <= 0) {\n      return this.q.when([]);\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  // Optional\n  // Required for templating\n  metricFindQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/search',\n      data: options,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d, value: i};\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        refId: target.refId\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}